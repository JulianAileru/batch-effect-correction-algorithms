install.packages("limma")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install('limma')
library(limma)
limma::removeBatchEffect()
limma::removeBatchEffect
BiocManager::install.packages("leukemiasEset")
BiocManager::install("leukemiasEset")
library(leukemiasEset)
data("leukemiasEset")
leukemiasEset
model.matrix(~ ou)
ourData <- leukemiasEset[, leukemiasEset$LeukemiaType %in% c("ALL", "NoL")]
ourData$LeukemiaType <- factor(ourData$LeukemiaType)
ourData
factor(ourData$LeukemiaType)
browseVignettes("limma")
library(limma)
library(dplyr)
install.package("dplyr")
install.packages("dplyr")
install.pacakges("readr")
install.packages("readr")
library(readr)
readr::read_csv("Data/2-area_data_detection_filter.csv")
getwd()
setwd("/Users/jaileru/GitHub/batch-effect-correction-algorithms/")
D <- readr::read_csv("Data/2-area_data_detection_filter.csv")
M <- readr::read_csv("Data/sample_metadata_all_batches.csv")
View(M)
BiocManager::install('Biobase')
BiocManager::install('Biobase',force=TRUE)
M <- readr::read_csv("Data/sample_metadata_all_batches_noblanks_nooutliers.csv")
View(M)
source("~/GitHub/batch-effect-correction-algorithms/Limma.R")
View(D)
rownames(D) <- D$...1
D$..1 <- NULL
rownames(D)
rownames(D) <- D$...1
D$...1
install.packages("tibble")
library(tibble)
D <- readr::read_csv("Data/2-area_data_detection_filter.csv")
w
rownames(D) <- D %>% column_to_rownames("...1")
D <- D %>% column_to_rownames("...1")
View(D)
M <- readr::read_csv("Data/sample_metadata_all_batches_noblanks_nooutliers.csv")
View(M)
M <- M %>% column_to_rownames("sample_name")
rownames(M)
M <- M[match(rownames(D),rownames(M))]
M <- M[match(rownames(D),rownames(M)), ]
mat <- t(as.matrix(D))
sample_data <- AnnnotaedDataFrame(data = M)
library(Biobase)
sample_data <- Biobase::AnnnotaedDataFrame(data = M)
sample_data <- Biobase::AnnnotaedDataFrame(data = M)
sample_data <- Biobase::AnnotatedDataFrame(data = M)
sample_data
eset <- ExpressionSet(assayData = expr_matrix,
phenoData = sample_data)
eset <- ExpressionSet(assayData = mat,
phenoData = sample_data)
eset
limma::removeBatchEffect(eset)
eset
batch <- M$batch
batch
limma::removeBatchEffect(eset,batch=batch)
corrected <- limma::removeBatchEffect(D,batch,sample_type)
source("~/GitHub/batch-effect-correction-algorithms/Limma.R")
source("~/GitHub/batch-effect-correction-algorithms/Limma.R")
corrected <- limma::removeBatchEffect(D,batch)
corrected <- limma::removeBatchEffect(eset,batch,sample_type)
design = model.matrix(~ batch + sample_type)
design
source("~/GitHub/batch-effect-correction-algorithms/Limma.R")
corrected
corrected.to_csv("Data/limma_ref.csv")
write.csv(file="Data/limma_ref.csv",corrected)
corrected <- limma::removeBatchEffect(eset,batch)
write.csv(file="Data/limma_ref.csv",corrected)
design <- model.matrix(~'sample_type)
design <- model.matrix(~sample_type)
design
source("~/GitHub/batch-effect-correction-algorithms/Limma.R")
write.csv(corrected,file='Data/limma_ref.csv')
setwd("/Users/jaileru/Projects/Metabolomics/MetNormalizer")
pwd
getwd()
require(devtools)
if(!require(devtools)){
install.packages("devtools")
}
devtools::install_github("jaspershen/MetNormalizer")
devtools::install_github("jaspershen/demoData")
library(demoData)
library(MetNormalizer)
help(MetNormalizer)
??MetNormalizer
metNor()
metNor
showMethods(metNor)
limma
limma::removeBatchEffect()
limma::removeBatchEffect
source("~/GitHub/batch-effect-correction-algorithms/Limma.R")
?model.matrix
y <- matrix(rnorm(10*9),10,9)
y[,1:3] <- y[,1:3] + 5
batch <- c("A","A","A","B","B","B","C","C","C")
y
dim(y)
limma::removeBatchEffect
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
RBEC(y,batch = batch)
ls
RBEC
RBEC(y,batch = batch)
RBEC(y,batch = batch)
RBEC(y,batch = batch)
source("~/GitHub/batch-effect-correction-algorithms/Limma_decomp.R")
q
q()
exit()
RBEC(y,batch = batch)
q
q()
exit()
exit
q
MetNormalizer::metNor
showMethods(metNor)
pwd
getwd()
lmFit
